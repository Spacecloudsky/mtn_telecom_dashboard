{
    "cells": [
        {
            "cell_type": "code",
            "execution_count": None,
            "id": "966f73a9-9738-46d3-8bb7-54c6f400b215",
            "metadata": {},
            "outputs": [
                {
                    "name": "stderr",
                    "output_type": "stream",
                    "text": [
                        "2025-07-21 16:11:22.300 No runtime found, using MemoryCacheStorageManager\n"
                    ]
                }
            ],
            "source": [
                "import streamlit as st\n",
                "import pandas as pd\n",
                "import plotly.express as px\n",
                "\n",
                "# Load the cleaned telecom dataset\n",
                "@st.cache_data\n",
                "def load_data():\n",
                "    df = pd.read_csv(\"telecom_customers.csv\")\n",
                "    return df\n",
                "\n",
                "df = load_data()\n",
                "\n",
                "st.set_page_config(layout=\"wide\")\n",
                "st.title(\"ðŸ“Š MTN Telecom SQL Analysis Dashboard\")\n",
                "st.markdown(\"\"\"\n",
                "This interactive dashboard provides insight into the MTN Telecom customer base based on SQL-driven data analysis.\n",
                "Use the tabs below to explore each key analytical section.\n",
                "\"\"\")\n",
                "\n",
                "# Create tabs for the 10 key analysis sections\n",
                "tabs = st.tabs([\n",
                "    \"Customer Segmentation\",\n",
                "    \"Churn Risk Analysis\",\n",
                "    \"Top Users & Revenue\",\n",
                "    \"KYC Compliance\",\n",
                "    \"Plan Performance\",\n",
                "    \"Network Quality\",\n",
                "    \"Payment Behavior\",\n",
                "    \"Support Demand\",\n",
                "    \"Loyalty & Referrals\",\n",
                "    \"Device Usage\"\n",
                "])\n",
                "\n",
                "# 1. Customer Segmentation\n",
                "with tabs[0]:\n",
                "    st.subheader(\"Customer Segmentation by State and Plan Type\")\n",
                "    state_plan = df.groupby(['state', 'plan_type'])['customer_id'].count().reset_index()\n",
                "    fig1 = px.bar(state_plan, x='state', y='customer_id', color='plan_type',\n",
                "                  title='Customer Count by State and Plan Type',\n",
                "                  labels={'customer_id': 'Customer Count'})\n",
                "    st.plotly_chart(fig1, use_container_width=True)\n",
                "\n",
                "# 2. Churn Risk Analysis\n",
                "with tabs[1]:\n",
                "    st.subheader(\"Churn Risk Analysis\")\n",
                "    churn_df = df[\n",
                "        (df['payment_status'].isin(['Unpaid', 'Overdue'])) &\n",
                "        (df['data_usage_mb'] == 0) &\n",
                "        (df['voice_usage_minutes'] == 0) &\n",
                "        (df['sms_count'] == 0)\n",
                "    ]\n",
                "    st.write(\"### Inactive and Non-Paying Customers\")\n",
                "    st.dataframe(churn_df[['customer_id', 'full_name', 'payment_status']])\n",
                "    fig2 = px.histogram(churn_df, x='payment_status', title='Inactive Customers with Payment Issues')\n",
                "    st.plotly_chart(fig2, use_container_width=True)\n",
                "\n",
                "# 3. Top Users & Revenue Contributors\n",
                "with tabs[2]:\n",
                "    st.subheader(\"Top 10 Data Users\")\n",
                "    top_users = df.sort_values(by='data_usage_mb', ascending=False).head(10)\n",
                "    fig3a = px.bar(top_users, x='full_name', y='data_usage_mb', text='data_usage_mb',\n",
                "                   title='Top 10 Data Users', labels={'data_usage_mb': 'MB Used'})\n",
                "    st.plotly_chart(fig3a, use_container_width=True)\n",
                "\n",
                "    st.subheader(\"Top 10 Revenue-Contributing Customers\")\n",
                "    top_bills = df.groupby(['customer_id', 'full_name'])['bill_amount'].sum().reset_index()\n",
                "    top_bills = top_bills.sort_values(by='bill_amount', ascending=False).head(10)\n",
                "    fig3b = px.bar(top_bills, x='full_name', y='bill_amount', text='bill_amount',\n",
                "                   title='Top 10 Revenue-Contributing Customers', labels={'bill_amount': 'â‚¦'})\n",
                "    st.plotly_chart(fig3b, use_container_width=True)\n",
                "\n",
                "# 4. KYC Compliance Check\n",
                "with tabs[3]:\n",
                "    st.subheader(\"KYC Compliance vs Defaulters\")\n",
                "    df4 = df.groupby('kyc_status').agg(\n",
                "        total_users=('customer_id', 'count'),\n",
                "        defaulters=('payment_status', lambda x: (x.isin(['Unpaid', 'Overdue'])).sum())\n",
                "    ).reset_index()\n",
                "    fig4 = px.bar(df4, x='kyc_status', y=['total_users', 'defaulters'], barmode='group',\n",
                "                  title='KYC Status vs Default Rate')\n",
                "    st.plotly_chart(fig4, use_container_width=True)\n",
                "\n",
                "# 5. Plan Performance Analysis\n",
                "with tabs[4]:\n",
                "    st.subheader(\"Revenue by Plan Type\")\n",
                "    plan_df = df.groupby(['plan_name', 'plan_type'])['bill_amount'].sum().reset_index()\n",
                "    fig5 = px.treemap(plan_df, path=['plan_type', 'plan_name'], values='bill_amount',\n",
                "                     title='Revenue Contribution by Plan')\n",
                "    st.plotly_chart(fig5, use_container_width=True)\n",
                "\n",
                "# 6. Network Quality Evaluation\n",
                "with tabs[5]:\n",
                "    st.subheader(\"Network Quality by State\")\n",
                "    df6 = df.groupby('state').agg(\n",
                "        avg_score=('network_quality_score', 'mean'),\n",
                "        avg_drops=('call_drop_rate', 'mean')\n",
                "    ).reset_index().sort_values(by='avg_score')\n",
                "    fig6 = px.bar(df6, x='state', y='avg_score', title='Average Network Quality Score by State')\n",
                "    st.plotly_chart(fig6, use_container_width=True)\n",
                "\n",
                "# 7. Payment Behavior Trends\n",
                "with tabs[6]:\n",
                "    st.subheader(\"Payment Method Usage\")\n",
                "    pay_df = df['payment_method'].value_counts().reset_index()\n",
                "    pay_df.columns = ['payment_method', 'count']\n",
                "    fig7 = px.pie(pay_df, names='payment_method', values='count',\n",
                "                  title='Distribution of Payment Methods')\n",
                "    st.plotly_chart(fig7, use_container_width=True)\n",
                "\n",
                "# 8. Customer Support Demand\n",
                "with tabs[7]:\n",
                "    st.subheader(\"Customers with Frequent Support Tickets\")\n",
                "    support_df = df[df['support_tickets_count'] >= 3][['customer_id', 'full_name',\n",
                "                                                       'support_tickets_count', 'customer_satisfaction']]\n",
                "    fig8 = px.scatter(support_df, x='support_tickets_count', y='customer_satisfaction',\n",
                "                      color='full_name', title='Support Demand vs Customer Satisfaction')\n",
                "    st.plotly_chart(fig8, use_container_width=True)\n",
                "\n",
                "# 9. Customer Loyalty and Referrals\n",
                "with tabs[8]:\n",
                "    st.subheader(\"Referrals by Loyalty Tier\")\n",
                "    loyalty_df = df.groupby('customer_tier').agg(\n",
                "        avg_referrals=('referrals_made', 'mean'),\n",
                "        total_referrals=('referrals_made', 'sum')\n",
                "    ).reset_index()\n",
                "    fig9 = px.bar(loyalty_df, x='customer_tier', y='total_referrals',\n",
                "                  title='Total Referrals by Customer Tier')\n",
                "    st.plotly_chart(fig9, use_container_width=True)\n",
                "\n",
                "# 10. Device Usage Patterns\n",
                "with tabs[9]:\n",
                "    st.subheader(\"Device Usage by OS\")\n",
                "    device_df = df.groupby(['device_type', 'os_type'])['customer_id'].count().reset_index()\n",
                "    device_df.columns = ['device_type', 'os_type', 'user_count']\n",
                "    fig10 = px.sunburst(device_df, path=['device_type', 'os_type'], values='user_count',\n",
                "                        title='Device and OS Distribution')\n",
                "    fig10.update_traces(textinfo='label+percent entry')\n",
                "    st.plotly_chart(fig10, use_container_width=True)\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "id": "69b6ca52-e20d-4037-88ff-b10db090b1dc",
            "metadata": {},
            "outputs": [],
            "source": []
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python [conda env:base] *",
            "language": "python",
            "name": "conda-base-py"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.12.7"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 5
}
